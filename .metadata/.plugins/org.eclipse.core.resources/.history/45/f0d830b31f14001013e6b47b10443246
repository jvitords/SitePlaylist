package com.projetoplaylist.controller;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.projetoplaylist.entities.Playlist;
import com.projetoplaylist.entities.dto.PlaylistPostDTO;
import com.projetoplaylist.entities.dto.PlaylistGetDTO;
import com.projetoplaylist.service.PlaylistService;


@RestController
@RequestMapping(value = "/playlist")
public class PlaylistController {
	
	@Autowired
	PlaylistService playlistService;
	
	
	@GetMapping(value = "/{id}")
	public ResponseEntity<PlaylistGetDTO> findById(@PathVariable Long id){
		Playlist playlist = playlistService.findById(id);
		PlaylistGetDTO playlistGetDTO = new PlaylistGetDTO(playlist);
		return ResponseEntity.ok().body(playlistGetDTO);
	}
	
	// encontra playlist que contém o nome que for passado na URL, por exemplo: /playlist?name=sertanejo
	// caso nada for passado ele vai entrar no if e retornar todas as playlists
	@GetMapping
    public ResponseEntity<List<PlaylistGetDTO>> findAllOrByName(@RequestParam(required = false) String name) { // aqui quer dizer que posso procurar pelo nome da playlist, mas se não for passado nada não tem problema
        if (name == null || name.isBlank()) {
        	List<Playlist> list = playlistService.findAllGetPlaylist();
        	List<PlaylistGetDTO> playlistGetDTO = list.stream().map(p -> new PlaylistGetDTO(p)).collect(Collectors.toList());
        	return ResponseEntity.ok().body(playlistGetDTO);
        } else {
        	List<Playlist> list = playlistService.findByName(name);
        	List<PlaylistGetDTO> playlistGetDTO = list.stream().map(p -> new PlaylistGetDTO(p)).collect(Collectors.toList());
        	return ResponseEntity.ok().body(playlistGetDTO);
        }
    }
	
	@PostMapping
	public ResponseEntity<Playlist> createPlaylist(@RequestBody PlaylistPostDTO playlistDTO) {
		Playlist playlist = playlistService.fromPlaylist(playlistDTO);
		playlistService.saveNewPlaylist(playlist);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest()
				.path("/{id}")
				.buildAndExpand(playlist.getId())
				.toUri(); // será a URL para pesquisar o novo User criado
		return ResponseEntity.created(null).body(playlist);
	}
	
	
}
